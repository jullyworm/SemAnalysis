// Copyright (c) 2004 by RRIAI. All rights reserved.
//===================================================================
// Usage notes: Словарь СК.
//	Функциональность:
//		- быстрый поиск по названию
//		- просмотр
//		- добавление/редактирование

//	Уникальными идентификаторами (однозначно определяющими термин) явл.:
//	- для фраз или СК: название ( norm ) + правило ( rule ) = сем.класс

//===================================================================
// Используется :   
//===================================================================
// Использует   :   IKNVoc, IKNPhrase
//===================================================================
// Oct 2005                  Created               L. Sidorova, RRIAI
//===================================================================
#ifndef IKNPhraseVocH
#define IKNPhraseVocH
//---------------------------------------------------------------------------
#include "IKNVoc.h"
#include "IKNPhrase.h"
//---------------------------------------------------------------------------
/** Словарь СК. */
class IKNPhraseVoc :  public virtual IKNVoc {
public:
	/** Взятие следующего термина. Термины выдаются в алфавитном порядке.
	 *  При наличие нескольких терминов с одинаковым названием, они повторяются.
     *	@return 0 если список окончен.
	 */
	virtual IKNPhrase* GetNextPhrase() = 0;

	/** Взятие следующего термина (например по списку терминов с одинаковым названием).
	 *	@return 0 если список окончен (или не существует).
	 */
	virtual IKNPhrase* GetSamePhrase() = 0;

	/** Взятие следующего СК, включающего в свой состав заданный термин. */
	virtual IKNPhrase* GetNextInclude( IKNConcept* ) = 0;

	/** Поиск термина в словаре по номальной форме.
	 *	Если таких терминов несколько, то активируется локальный список
	 *	терминов с данной нормальной формой.
     *  Нельзя использовать данный механизм во вложенных циклах.
     *	При использовании этой функции не требуется вызывать InitSame.
	 *	@return true - если был инициализирован список локальных элементов.
	 */
	virtual bool FindConcept( char* iNorm, IKNPhrase** oTerm ) = 0;

	/** Поиск СК с заданными параметрами.
     *	@param iRule - имя правила, которое не идентифицирует фразу.
     *	@param iMorh - набор морф. индексов составных частей - второй ключ, 
     *			который вместе с правилом однозначно идентифицирует фразу.
	 */
//	virtual IKNPhrase* FindPhrase( char* iNorm, char* iRule ) = 0; // old
	virtual IKNPhrase* FindPhrase( char* iNorm, const char* iRule, char* iMorh ) = 0;

	/** Удаление СК. */
//	virtual void DeletePhrase( char* iNorm, char* iRule ) = 0;
	virtual void DeletePhrase( char* iNorm, const char* iRule, char* iMorh ) = 0;

	/** Удаление термина из словаря.
	 *	@note 	Проверки на наличие данного термина в словаре и 
	 *			соответствие типа термина словарю не делается.
	 */
	virtual void DeletePhrase( IKNPhrase* iTerm ) = 0;

	/** Создать и добавить СК в словарь.
	 * @note Без проверки наличия в словаре. Далее необходимо добавить части СК используя SetPart.
	 * @param iNorm - нормальная форма
	 * @param iRule - имя правила, по которому образована фраза
	 * @param iPartCount - кол-во составных частей
	 */
	virtual IKNPhrase* CreatePhrase( char* iNorm, const char* iRule, unsigned iPartCount ) = 0;
};
//---------------------------------------------------------------------------
#endif
