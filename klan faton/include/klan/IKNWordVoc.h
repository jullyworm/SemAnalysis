// Copyright (c) 2004 by RRIAI. All rights reserved.
//===================================================================
// Usage notes: Словарь. Включает только спики терминов со статистикой
//				и таблицы парадигм.
//	Функциональность:
//		- быстрый поиск по названию
//		- просмотр
//		- добавление/редактирование
//	На будущее:
//		- морф.анализ

//	Уникальными идентификаторами (однозначно определяющими термин) явл.:
//	- для слов:		   название ( norm ) + морф. класс ( morh ) +
//					   семант. класс (любой)

//===================================================================
// Используется :   
//===================================================================
// Использует   :   IKNVoc, IKNWord
//===================================================================
// Oct 2005                  Created               L. Sidorova, RRIAI
//===================================================================
#ifndef IKNWordVocH
#define IKNWordVocH
//---------------------------------------------------------------------------
#include "IKNVoc.h"
#include "IKNWord.h"
//---------------------------------------------------------------------------
/** Словарь слов. */
class IKNWordVoc : public virtual IKNVoc
{
public:
	/** Взятие следующего термина. Термины выдаются в алфавитном порядке.
	 *  При наличие нескольких терминов с одинаковым названием, они повторяются.
     *	@return 0 если список окончен.
	 */
	virtual IKNWord* GetNextWord() = 0;

	/** Взятие следующего термина (например по списку терминов с одинаковым названием).
	 *	@return 0 если список окончен (или не существует).
	 */
	virtual IKNWord* GetSameWord() = 0;

	/** Поиск термина в словаре по номальной форме.
	 *	Если таких терминов несколько, то активируется локальный список
	 *	терминов с данной нормальной формой.
     *  Нельзя использовать данный механизм во вложенных циклах.
     *	При использовании этой функции не требуется вызывать InitSame.
	 *	@return true - если был инициализирован список локальных элементов.
	 */
	virtual bool FindConcept( char* iNorm, IKNWord** oTerm ) = 0;

	/** Поиск слов с заданной частью речи.	Будем считать, что таких слов ровно 1.
     *	@param iPartSpeech - часть речи
	 */
	virtual IKNWord* FindKNWord( char* iNorm, char* iPartSpeech ) = 0;
	/** Поиск слов по основе и классу.
     *	@param iMorph - идентификатор морфологического класса слова
	 */
	virtual IKNWord* FindKNWord( char* iNorm, byte_t iWorph ) = 0;

	/** Удаление термина из словаря.
	 *	@note 	Проверки на наличие данного термина в словаре и 
	 *			соответствие типа термина словарю не делается.
	 */
	virtual void DeleteKNWord( IKNWord* iTerm ) = 0;

	/** Удаление слова. */
	virtual void DeleteWord( char* iNorm, char* iPartSpeech ) = 0;
	virtual void DeleteWord( char* iNorm, byte_t iWorph ) = 0;

	virtual IKNWord* CreateKNWord( char* iNorm,
//			IKNMorphClass* iMorh, IKNParadigm* iParadigm=0 ) = 0;
			byte_t m_type, unsigned iParadigmId=0 ) = 0;

	/** Морфологический анализ слова. (нужен еще список атрибутов?)
	 *	Последующие термины достаются с помощью GetNextConcept()
     *	@param iForm - словоформа
     *	@param IKNWord - первый подходящий термин
	 *	@return кол-во терминов с такой словоформой
     *			0 если таких терминов нет
	 */
//	virtual int AnalysisWord( char* iForm, IKNWord* oWord ) = 0;

};
//---------------------------------------------------------------------------
#endif
