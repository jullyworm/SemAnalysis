// Copyright (c) 2019 by IIS. All rights reserved.
//===================================================================
// Usage notes: Словарь базовых терминов. Включает спики терминов со статистикой.
//	Уникальными идентификаторами (однозначно определяющими термин) явл.
//	в общем случае название ( norm )
//===================================================================
// Nov 2005                  Created               L. Sidorova, RRIAI
//===================================================================
#ifndef IKNConceptVocH
#define IKNConceptVocH
//---------------------------------------------------------------------------
#include "IKNConcept.h"
//---------------------------------------------------------------------------
// !!! НЕ ИСПОЛЬЗУЕТСЯ
/** 
 * @interface IKNVoc
 * Словарь. Статистика терминов.
 */
class IKNConceptVoc : public IKNVoc {
public:
	/** Взятие следующего термина. Термины выдаются в алфавитном порядке.
	 *  При наличие нескольких терминов с одинаковым названием, они повторяются.
     *	@return 0 если список окончен.
	 */
	virtual IKNConcept* GetNext() = 0;

    /** Инициализироет список элементов с одинаковым названием в активном словаре. */
//	virtual void InitSame( IKNConcept* oTerm ) = 0;

	/** Поиск термина в активном словаре по номальной форме.
	 *	Если таких терминов несколько, то активируется локальный список
	 *	терминов с данной нормальной формой.
     *  Нельзя использовать данный механизм во вложенных циклах.
     *	При использовании этой функции не требуется вызывать InitSame.
	 *	@return true - если был инициализирован список локальных элементов.
	 */
	virtual bool FindConcept( char* iNorm, IKNConcept* oTerm ) = 0;

	/** Взятие следующего термина (например по списку терминов с одинаковым названием).
	 *	@return 0 если список окончен (или не существует).
	 */
	virtual IKNConcept* GetSame() = 0;

	/** Удаление термина из словаря.
	 *	@note 	Проверки на наличие данного термина в словаре и 
	 *			соответствие типа термина словарю не делается.
	 */
	virtual void Delete( IKNConcept* iTerm ) = 0;

	/** Создать и добавить термин (конструкцию) в словарь.
	 *	Термин добавляется с 0 статистикой.
	 * @param iNorm - нормальная форма слова
	 * @return 	0 - если термин уже есть в словаре
	 */
	virtual IKNConcept* CreateConcept( char* iNorm ) = 0;

	/** Расширенный поиск терминов с заданным сем. классом, образованному в результате 
	 *	применения функции FindConcept (или FindWord).
     *	@param iSemClass - семантический класс термина
	 *	@return кол-во терминов с таким классом
     *			0 если таких терминов нет
	 */
//	virtual int FindConceptSem( char* iSemClass, IKNConcept* oTerm ) = 0;
};
//---------------------------------------------------------------------------
#endif
